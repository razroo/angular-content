
\chapter{ Displaying Data }

One of the nicer things about the migration from AngularJS to Angular was that many html bindings felt at home. If you are someone who had the ability to experience Angular, after working with AngularJS then templates feel entirely intuitive. 

Templates in Angular are one of the easier topics to grasp in Angular. Sometimes when learning syntax for the first time, there's so much there that it's easy to overlook reasons behind syntax. Perhaps we assume the reason there are different symbols and letters for the different ways of operating within a framework is because we just need to represent the different ways of doing a particular action within a framework.

\section{ Interpolation }

Interpolation, by definition, means inserting something of a different nature into something else. In the context of Angular, interpolation means being able to place a JavaScript expression in your html. This is signified by the double curly brace. 
\begin{lstlisting}[caption=interpolation-example.component.html]
This is 2 + 2
<!-- This is 4 --> 
\end{lstlisting}

\section{ Angular Components }
In an Angular setting, based on best practices and those set into place by the Angular CLI, the generation of the component will consist of four files: 
\begin{enumerate}
  \item *.component.ts
  \item *.component.spec.ts
  \item *.component.html
  \item *.component.scss
\end{enumerate}

In the above files, html and component files will tend to interact with each other the most. For any component file, there is atleast going to be one or more properties placed in the respective component file. 
\begin{lstlisting}[caption=header.component.ts]
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'pxl-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})
export class HeaderComponent implements OnInit {
  @Input() title: string;
  constructor() { }

  ngOnInit() {}
} 
\end{lstlisting}

\begin{lstlisting}[caption=header.component.html]
<h1>{{title}}</h1>
\end{lstlisting}

Here, we are interpolating the \lstinline{title} property into our html, by using double curly braces around the value. This is classic syntax in an Angular setting. 
\mybox{ The first usage of curly braces in languages was by a language called BCPL. It was created by Martin Richards. Instead of the use of\lstinline{BEGIN} and {END} implemented by other languages, he used \lstinline{\$( \$)}. It was a natural extension of parenthesis, which is all that keyboards offered at that time. In 1967, curly braces, started making their way into mainstream keyboards. 

The B Language developed by Ken Thompson, and later adopted the C language, was officially made available in 1969. Brackets were already used for arrays. Curly braces was a natural extension to \lstinline{\$( \$)}, as it was easier to  write, and now available in keyboards. So C, which was a natural extension of  the B language, and the gateway to most modern programming languages, used  curly braces to group statements(i.e. actions to carried out by programming  language). 
  
Angular uses curly braces in a very similar way to represent statement in html. Anything in the double curly braces \lstinline{\{\{\}\}}, can be regular JavaScript code. The reason that angular uses a double curly brace, is because:
\begin{enumerate}
  \item A singular curly brace in JavaScript represents an object
  \item We would come across the awkward situation, wherein a curly brace in 
  regular html as a string, would require the need for code to be escaped. 
  (Something I've experienced with other programming languages, and it is 
  indeed really awkward.)
\end{enumerate} 
}

\section{ Displaying an Array within an HTML Template }
Quite a common occurrence within any application, is that the data will return an array of objects - also known as a collection - to be consumed by the app. Many times there will be a need to iterate over the array with the html, so that the data objects can be accessed. 
\begin{lstlisting}[caption=px-code-box.component.ts]
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'px-code-box',
  templateUrl: './code-box.component.html',
  styleUrls: ['./code-box.component.scss']
})
export class CodeBoxComponent implements OnInit {
  @Input() cssCode: string[];
  constructor() { }

  ngOnInit() {}
} 
\end{lstlisting}

\begin{lstlisting}[caption=px-code-box.component.html]
<div *ngFor="let css of cssCode">
{{css}}
</div>   
\end{lstlisting}

The \lstinline{*ngFor} works similar to a regular Javascript \lstinline{for} loop, iterating through every value within the array. 

\mybox{The angular called a for loop in Angular, and ngFor, because it doesn't exactly act like a regular for loop within Angular. Instead, it iterates over every value contained within the array. It's an Angular flavored for loop. 
\lstinline{*ngFor} is therefore a perfect name for the angular flavored for loop which iterates through all values.
  
You might also be wondering what the \lstinline{*} is doing next to \lstinline{ngFor} within Angular. The asterisk symbol \lstinline{*} has a strong history within programming of meaning everything. So what is the everythingthat the asterisk here is referring to you might ask? Without going into too much detail, the \lstinline{*ngFor} is actually a micro syntax. It is telling Angular wrap an \lstinline{<ng-template>} (the syntax angular uses to determinesomething is a template) around all elements, and populate it with elementswithin the \lstinline{<ng-template>}. So the asterisk \lstinline{*} is actuallysaying, target all templates, and insert this unique Angular directive(i.e. \lstinline{*ngFor}). 

\footnote{https://angular.io/guide/structural-directives\#asterisk}
\footnote{https://angular.io/guide/template-syntax\#ngFor}
}

\subsection{ Accessing Object Data Within Arrays }
It is quite common that a situation will arise, that a developer will need to access data within the object. Doing so, is exactly the same way as you would expect within regular Javascript. Let's update our code-box component code. 
\begin{lstlisting}[caption=px-code-box.component.ts]
import { Component, OnInit } from '@angular/core';
import { CssCode } from 'css-code.interface.ts';

@Component({
  selector: 'px-code-box',
  templateUrl: './code-box.component.html',
  styleUrls: ['./code-box.component.scss']
})
export class CodeBoxComponent implements OnInit {
  @Input() cssCode: CssCode[];
  constructor() { }

  ngOnInit() {}
} 
\end{lstlisting}
  
\begin{lstlisting}[caption=px-code-box.component.html]
<div *ngFor="let css of cssCode">
{{css.file}}
</div>   
\end{lstlisting} 

We are accessing the file property within our css object the same way we would any regular JavaScript object.

\section{ Conditionally Display HTML }
Within Angular there is the ability to conditionally display html. Similar to an \lstinline{if} statement within Javascript, the html will only be displayed, if it matches the expected statement. 
\begin{lstlisting}
<div *ngFor="let css of cssCode">
<div *ngIf="css.file as file" class="name">
{{file}}
</div>   
\end{lstlisting}

In the above code, file will only be shown if it actually exists on the css object. 

\mybox{Note: We are using a syntax called \lstinline{as}, which allows for us to use a short name for our \lstinline{*ngIf} block. Will discuss this more as time goes on.}