
\chapter{ Creating a Config }

\textit{ Note: Creating your own config for the most part is not ideal. Ideally, configs should be altered in the backend and pulled in as an API. It should be noted, that any config has the potential of being exposed on the front end, therefore making front end config unsafe. However, many apps will experience iteration, even in larger enterprises. This chapter therefore deals with the importance of having configs available within app. In addition, the importance of having a config within app.}

\section{ Use Case for Creating a Config }
I would like to present why one would want to create their own config. We are, of course, all aware of what the environment config that is naturally baked into every Angular project \footnote{If not, feel free to look here [Link to chapter on environment files goes here]}. That is a great example of a great config file, which allows us to determine which values to use on the front end, based on environment. Another couple of situations where a config file might make sense is:
\begin{itemize}
  \item Feature Flags
  \item Api Server Rules
  \item App Insights Key
  \item OAuth
\end{itemize}

Technically, these can all be broken into a singular config. It would be a giant environment file. However, it would be cleaner to break these into smaller pieces, that give different values based on the central environment file.

\section{ How to Setup a Config File for App. }

With the mono repo architecture we are using, let's assume that our code is going into the \appNameKebabCase{} folder. It will be in the common folder, wherein there will be a configs folder. Something like this:

\begin{forest}
  [\appNameKebabCase{}
    [common
      [configs]
    ]
  ]
\end{forest}

\subsection{ How to Setup a Config File for App. }
As config files, are giant data globs, we are going to want to create an interface for them. The actual config files will go in our config file. So let's say we want to create a config specifically for OAuth, we would create a config folder called oauth-config, with the following files:
\begin{forest}
  [\appNameKebabCase{}
    [common
      [configs
        [oauth-config
          [\/oauth-config.deploy.json,file]
          [\/oauth-config.dev.json,file]
          [\/oauth-config.interface.ts,file]
        ]
      ]
    ]
  ]
\end{forest}

\subsection{ Creating a Config Service }
It is then important at this point to create a service, that will take it the appropriate config file, based on the appropriate environment.

\lstinputlisting[language=JavaScript]{./architecture/configs/creating-a-config/app-config.service.ts}

\subsection{ Load Files Prior to App Creation }
Angular provides a token called APP\_INITIALIZER, which will allow for our application to execute once application is finished.

\lstinputlisting[language=JavaScript]{./architecture/configs/creating-a-config/app.module.ts}

We now have the option to use this config anywhere we want throughout the app. 
