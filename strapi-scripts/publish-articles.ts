// this is the strapi schema to follow
// We are going to use a UUID generated by the content repo to target articles
// We are also going to pull in the id returned by Strapi, and updated UID. If UID and ID are present, it means
// that article has been created already and should be updated only.
const fs = require('fs');
const articlesJsonName = '../articles.json'
const articlesJson = require(articlesJsonName);

import { execute, makePromise } from 'apollo-link';
import { createHttpLink } from 'apollo-link-http';
import gql from 'graphql-tag';
import fetch from 'node-fetch';

const uri = 'http://localhost:1337/graphql';
const headers = {
    Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjE4MTM3MjI1LCJleHAiOjE2MjA3MjkyMjV9.yX3a1W9dP2QRNd0VJptIcjpnVKPrPBeK-UXmAdN2voY"
}
const link = createHttpLink({ uri, fetch, headers});

function readArticlesJson() {
  let filePath;
  let files = articlesJson.files;
  for(let file in files) {
    filePath = `./build/articles/${files[file].path.split("/").pop()}`;
    filePath = filePath.replace("md", "html");
    readHtmlArticleFiles(filePath);
  }
}

function readHtmlArticleFiles(filePath) {
  console.log('filePath');
  console.log(fs.readFileSync(filePath, "utf8"));
}

readArticlesJson();

const query = gql`
  mutation CreateAngularArticle {
      createAngularArticle(input: {data: {
          Title: "test",
          Description: "test description",
          author: 1,
          UID: "d520ea41-57b2-4375-b167-0ecf1225013d",
          Content: "test 123",
          published_at: "2019-12-03T10:15:30Z",
          created_by: 1,
          updated_by: 1,
      }
      }) {
          angularArticle {
              id
              Title
              author {
                  firstName
                  lastName
              }
              UID
          }
      }
  }
`

const operation = {
  query,
}

export function createStrapiArticle(articleData) {
  execute(link, operation).subscribe(data => {
    console.log('data');
    console.log(data);
  });
}


