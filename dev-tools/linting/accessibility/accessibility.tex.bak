\chapter{ Accessibility with Codelyzer}    
Codelyzer is a static code analyzer built on top of Tslint. It's a layer over Tslint with pre-made rules. It includes:

\begin{enumerate}
  \item Component selectors are kebab-case
  \item Directive selectors are camelCased
  \item no-host-metadata-property - Disallows use of \lstinline{host} within components
\end{enumerate}

\section{Why Codelyzer is Amazing}
Codelyzer is amazing. 

Why? Because it lets you work smarter rather than harder. 

How? It lets you think ahead, and gives you the information needed to find the right tools to solve potential pain point issues. This can make a difference in how quickly you can build your app. 

In this instance, by thinking ahead, and finding the right tool, it can make all the difference in your application. 

So you do you implement Codelyzer?

\section{Angular CLI and Codelyzer}
The Angular CLI includes Codelyzer out of the box. However, Codelyzer does not include linting \lstinline{a11y} rules by default. This is because it's still in experimental phase and hasn't been adopted/or developed enough to have a stable release. You don't have to add it into your application but it's a nice to have. 

If you want it part of your linting suite, you can add it to your tslint.json file. 

\subsection{Install Codelyzer If Not Using CLI}
We are assuming you have codelyzer installed already. This is because Angular CLI and NX installs Codelyzer by default. 

If you're unsure or don't have it installed, here's how to install it. 
\begin{verbatim}
npm i codelyzer --save-dev;
\end{verbatim}

\subsection{Add rules to tslint.json}
The following are the rules that suggested by the Codelyzer team to add accessibility to your application: 
\begin{lstlisting}
{
  "rulesDirectory": [
    "codelyzer"
  ],
  "rules": {
    ...,
    "template-accessibility-alt-text": true,
    "template-accessibility-elements-content": true,
    "template-accessibility-label-for": true,
    "template-accessibility-tabindex-no-positive": true,
    "template-accessibility-table-scope": true,
    "template-accessibility-valid-aria": true,
    "template-click-events-have-key-events": true,
    "template-mouse-events-have-key-events": true,
    "template-no-autofocus": true,
    "template-no-distracting-elements": true
  }
}  
\end{lstlisting}

When you have tslint enabled within your code editor, there are two scenarios that you can take advantage of these rules. 

\begin{enumerate}
  \item From within your Typescript files.
  \item Whenever you run \lstinline{ng lint} over entire project. You can tie ng lint into your CI/CD process, of course, to make sure project is thrown back if these ng lint rules do not pass. 
\end{enumerate}

\mybox{
\section{Accessibility tools in general}
It is important to note there are other tools on accessibility that Razroo reccomends as well. We will get to those soon. However, within the context of linting, codelyzer is the only tool you will need in your dev tool chain. 
}

