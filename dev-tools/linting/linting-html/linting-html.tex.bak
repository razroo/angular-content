
\chapter{ Linting HTML }

Linting HTML hasn't changed much over the years. This is because HTML isn't a language that's in a state of evolution. It's structured markup that's used in the context of a web app. 

While there's not HTML linter offered out of the box, having one is still beneficial. 

\mybox{
\section{ Sidestep }
Why not use something like Pug (once called Jade) for html templating? 

The main benefit of something like Pug is that it tells you where the html tag pairs begins and ends. In a complex html element, where there are many levels of nesting this can be beneficial.

However, templating comes with its own set of quirks. Libraries and frameworks may require things to be templated in a certain way to work.  
}

\section{Why Chose HTML Hint}
HTML hasn't changed at the core level. HTML hint is a robust and trust worthy linter that can be depended on and won't mess up your code at the same time. 

\section{Installing HTML Hint}
How to install HTML Hint: 
\begin{verbatim}
  npm install htmlhint --save-dev
\end{verbatim}

\section{Create an .htmlhintrc config file}
In the root of your app, create an .htmlhintrc file. The .htmlhintrc is set up to be the default config name for HTML hint. A sample config for HTML hint will just be a simple JSON object containing key values.

For example:

\begin{lstlisting}
{
  "attr-value-double-quotes": true,
  "src-not-empty": true,
  "alt-require": true,
}
\end{lstlisting}

\section{Adding an NPM Script in your package.json}
\begin{lstlisting}
  "lint-html": "htmlhint --rulesdir './rules/' '{apps,libs}/**/*.html'",
\end{lstlisting}

\section{Adding a Rules Directory for html hint}
You will notice that inside of our HTML hint command, we have created a rules directory. We are doing this so that we can potentially create our own sample HTML hint rule.

\section{What a Sample Rule Looks Like}
In the root of your directory, create a rules directory. Inside of that directory, let's create some sample logic:
\begin{lstlisting}
module.exports = function(HTMLHint) {
  HTMLHint.addRule({
    id: 'attr-space',
    description: 'Attributes cannot have useless whitespace between "=" and attribute name or attribute value.',
    init: function(parser, reporter) {
      var self = this;

      function handleTagStart(event) {
        var col = event.col + event.tagName.length + 1;

        event.attrs
          .filter(function(attr) {
            return attr.value;
          })
          .forEach(function(attr) {
            var rawAttr = attr.raw;
            var indexOfEqualSign = rawAttr.indexOf('=');

            if (rawAttr.charAt(indexOfEqualSign - 1) === ' ') {
              reporter.warn('Space between attribute name and "="', event.line, col + attr.index + indexOfEqualSign - 1, self, attr.raw);
            }

            if (rawAttr.charAt(indexOfEqualSign + 1) === ' ') {
              reporter.warn('Space between "=" and attribute value', event.line, col + attr.index + indexOfEqualSign + 1, self, attr.raw);
            }
          });
      }

      parser.addListener('tagstart', handleTagStart);
    }
  });
};
\end{lstlisting}

The above allows for a robust HTML lint architecture, with the ability to add
more rules if need be.
